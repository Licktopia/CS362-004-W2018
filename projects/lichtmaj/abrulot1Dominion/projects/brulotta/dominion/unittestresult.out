TESTING gainCards():
Test player 0.
Card added to deck= 7, expected = 7
G.deckCount = 6, expected = 6
Card added to discard= 7, expected = 7
G.discardCount = 1, expected = 1
Test player 1.
Card added to deck= 7, expected = 7
G.deckCount = 11, expected = 6
Card added to discard= 7, expected = 7
G.discardCount = 1, expected = 1
Tests passed: 7
Tests failed: 1
File 'dominion.c'
Lines executed:48.84% of 647
dominion.c:creating 'dominion.c.gcov'

TESTING buyCard():
Test buying a mine when there are enough coins, numbuys, and supply count.
Return value is 0, expected 0
G.supplyCount[mine] = 1, expected = 1
Test buying a mine when there aren't enough coins.
Return value is -1, expected -1
G.supplyCount[mine] = 2, expected = 2
Test buying a mine when there aren't buys, .
Return value is -1, expected -1
G.supplyCount[mine] = 2, expected = 2
Test buying a mine when there aren't mines left.
Return value is -1, expected -1
G.supplyCount[mine] = 0, expected = 0
Tests passed: 8
Tests failed: 0
File 'dominion.c'
Lines executed:48.84% of 647
dominion.c:creating 'dominion.c.gcov'

TESTING endTurn():
Testing Ending a Turn.
Turn ended, it is now the turn of 1, expected 1
G.numActions are 1, expected 1
G.numBuys are 1, expected 1
Number of cards in next player's hand 5, expected 5
Tests passed: 4
Tests failed: 0
File 'dominion.c'
Lines executed:48.84% of 647
dominion.c:creating 'dominion.c.gcov'

TESTING isGameOver():
Testing with new game.
New game is not over and return value is 0, expected 0
Testing with empty province .
Game is over and return value is 1, expected 1
Testing 3 empty supply piles .
Game is over and return value is 1, expected 1
Tests passed: 3
Tests failed: 0
File 'dominion.c'
Lines executed:48.84% of 647
dominion.c:creating 'dominion.c.gcov'

----------------- Testing Card: smithy ----------------
Smithy: Draw three cards from deck
Test 1: hand count = 5, expected = 7
Test 2: deck count = 0, expected = 2
Test 3: whose turn = 0, expected = 0
Test 4: num actions = 1, expected = 1
Tests passed: 2
Tests failed: 2
File 'dominion.c'
Lines executed:48.84% of 647
dominion.c:creating 'dominion.c.gcov'

----------------- Testing Card: village ----------------
Village: Draw one card plus 2 actions
Test 1: hand count = 5, expected = 5
Test 2: deck count = 4, expected = 4
Test 3: whose turn = 0, expected = 0
Test 4: num actions = 3, expected = 2
Tests passed: 3
Tests failed: 1
File 'dominion.c'
Lines executed:48.84% of 647
dominion.c:creating 'dominion.c.gcov'

----------------- Testing Card: Great Hall ----------------
Great Hall: Draw one card plus 1 action
Test 1: hand count = 5, expected = 5
Test 2: deck count = 4, expected = 4
Test 3: whose turn = 0, expected = 0
Test 4: num actions = 2, expected = 1
Tests passed: 3
Tests failed: 1
File 'dominion.c'
Lines executed:48.84% of 647
dominion.c:creating 'dominion.c.gcov'

----------------- Testing Card: adventurer ----------------
Adventurer: Reveal cards in deck until 2 treasure cards are revealed and discard the rest
Test 1 Correct number of cards in deck: deck count = 0, expected = 3
Test 2 The turn has not changed: whose turn = 0, expected = 0
Test 3 Actions are one fewer: num actions = 1, expected = 0
Test 4 Treasure in hand has increased by 2: after treasure = 4, expected = 6
Tests passed: 1
Tests failed: 3
File 'dominion.c'
Lines executed:48.84% of 647
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:33
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
     2408:   10:  if (*(int*)a > *(int*)b)
      178:   11:    return 1;
     2230:   12:  if (*(int*)a < *(int*)b)
      814:   13:    return -1;
     1416:   14:  return 0;
     2408:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       65:   45:  SelectStream(1);
       65:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
      130:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       65:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
     1430:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
    14300:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
    12350:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
     6500:   66:        }
      650:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       65:   74:  if (numPlayers == 2)
        -:   75:    {
       49:   76:      state->supplyCount[curse] = 10;
       49:   77:    }
       16:   78:  else if (numPlayers == 3)
        -:   79:    {
       16:   80:      state->supplyCount[curse] = 20;
       16:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       65:   88:  if (numPlayers == 2)
        -:   89:    {
       49:   90:      state->supplyCount[estate] = 8;
       49:   91:      state->supplyCount[duchy] = 8;
       49:   92:      state->supplyCount[province] = 8;
       49:   93:    }
        -:   94:  else
        -:   95:    {
       16:   96:      state->supplyCount[estate] = 12;
       16:   97:      state->supplyCount[duchy] = 12;
       16:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       65:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       65:  103:  state->supplyCount[silver] = 40;
       65:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
     2730:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
    21450:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
    10075:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
     1252:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       97:  116:		  if (numPlayers == 2){ 
       65:  117:		    state->supplyCount[i] = 8; 
       65:  118:		  }
       32:  119:		  else{ state->supplyCount[i] = 12; }
       97:  120:		}
        -:  121:	      else
        -:  122:		{
      553:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      650:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     9425:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
     9425:  131:	}
        -:  132:
     1300:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
      422:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
      146:  141:      state->deckCount[i] = 0;
     1168:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
      438:  144:	  state->deck[i][j] = estate;
      438:  145:	  state->deckCount[i]++;
      438:  146:	}
     2336:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
     1022:  149:	  state->deck[i][j] = copper;
     1022:  150:	  state->deckCount[i]++;		
     1022:  151:	}
      146:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
      422:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
      146:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
      146:  161:    }
        -:  162:
        -:  163:  //draw player hands
      422:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
      146:  167:      state->handCount[i] = 0;
      146:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
      146:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
     3640:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
     1755:  179:      state->embargoTokens[i] = 0;
     1755:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       65:  183:  state->outpostPlayed = 0;
       65:  184:  state->phase = 0;
       65:  185:  state->numActions = 1;
       65:  186:  state->numBuys = 1;
       65:  187:  state->playedCardCount = 0;
       65:  188:  state->whoseTurn = 0;
       65:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
      780:  193:  for (it = 0; it < 5; it++){
      325:  194:    drawCard(state->whoseTurn, state);
      325:  195:  }
        -:  196:
       65:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
       65:  199:  return 0;
       65:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
      184:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
      184:  210:  if (state->deckCount[player] < 1)
       19:  211:    return -1;
      165:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
     3586:  215:  while (state->deckCount[player] > 0) {
     1628:  216:    card = floor(Random() * state->deckCount[player]);
     1628:  217:    newDeck[newDeckPos] = state->deck[player][card];
     1628:  218:    newDeckPos++;
    11328:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
     4036:  220:      state->deck[player][i] = state->deck[player][i+1];
     4036:  221:    }
     1628:  222:    state->deckCount[player]--;
        -:  223:  }
     3586:  224:  for (i = 0; i < newDeckPos; i++) {
     1628:  225:    state->deck[player][i] = newDeck[i];
     1628:  226:    state->deckCount[player]++;
     1628:  227:  }
        -:  228:
      165:  229:  return 0;
      184:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       55:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       55:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       55:  244:  if ( state->numActions < 1 )
        -:  245:    {
       47:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        8:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       16:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        8:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        8:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        8:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        8:  270:  return 0;
       55:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       40:  281:  who = state->whoseTurn;
        -:  282:
       40:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
        4:  286:    return -1;
       36:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
        4:  290:    return -1;
       32:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        4:  294:    return -1;
        -:  295:  } else {
       28:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       28:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       28:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       28:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       28:  309:  return 0;
       40:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      216:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      419:  317:  int currentPlayer = whoseTurn(state);
      419:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       80:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
      711:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       28:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      384:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      164:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      164:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      164:  360:  }
       28:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       28:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       16:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       16:  366:  }
        -:  367:  else{
       12:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       28:  371:  state->outpostPlayed = 0;
       28:  372:  state->phase = 0;
       28:  373:  state->numActions = 1;
       28:  374:  state->coins = 0;
       28:  375:  state->numBuys = 1;
       28:  376:  state->playedCardCount = 0;
       28:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      336:  381:  for (k = 0; k < 5; k++){
      140:  382:    drawCard(state->whoseTurn, state);//Draw a card
      140:  383:  }
        -:  384:
        -:  385:  //Update money
       28:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       28:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       37:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        5:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       32:  402:  j = 0;
     1664:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      800:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
       12:  407:	  j++;
       12:  408:	}
      800:  409:    }
       32:  410:  if ( j >= 3)
        -:  411:    {
        4:  412:      return 1;
        -:  413:    }
        -:  414:
       28:  415:  return 0;
       37:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       32:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       14:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       15:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       14:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       19:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       14:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       14:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       14:  442:    }
        -:  443:
        -:  444:  //score from deck
       32:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       14:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       17:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       14:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       18:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       14:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       14:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       14:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
      577:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
      394:  534:    for (i = 0; i < state->discardCount[player];i++){
      168:  535:      state->deck[player][i] = state->discard[player][i];
      168:  536:      state->discard[player][i] = -1;
      168:  537:    }
        -:  538:
       29:  539:    state->deckCount[player] = state->discardCount[player];
       29:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       29:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       29:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       29:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       29:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       29:  560:    if (deckCounter == 0)
       10:  561:      return -1;
        -:  562:
       19:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       19:  564:    state->deckCount[player]--;
       19:  565:    state->handCount[player]++;//Increment hand count
       19:  566:  }
        -:  567:
        -:  568:  else{
      548:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
      548:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
      548:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      548:  577:    state->deckCount[player]--;
      548:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
      567:  581:  return 0;
      577:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       60:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
       16:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
       18:  599:      return 3;
        -:  600:    case gold:
        6:  601:      return 6;
        -:  602:    case adventurer:
        4:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
       12:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
        4:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       60:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
       24:  654:  int currentPlayer = whoseTurn(state);
       24:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
       24:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
       24:  659:  int drawntreasure=0;
        -:  660:  int cardDrawn;
       24:  661:  int z = 0;// this is the counter for the temp hand
       24:  662:  if (nextPlayer > (state->numPlayers - 1)){
        6:  663:    nextPlayer = 0;
        6:  664:  }
        -:  665://printf("\nin cardEffect\n");
        -:  666:
        -:  667:  //uses switch to select card and perform actions
       36:  668:  switch( card ) 
        -:  669:    {
        -:  670:		case adventurer:
       10:  671:			return adventurerAction(handPos, currentPlayer, drawntreasure, state);
        -:  672:		
        -:  673:		case baron:
    #####:  674:			baronAction(choice1, currentPlayer, state);
        -:  675:		
        -:  676:		case outpost:
    #####:  677:			outpostAction(handPos, currentPlayer, state);
        -:  678:		
        -:  679:		case smithy:
        6:  680:			smithyAction(handPos, currentPlayer, state);	
        -:  681:		
        -:  682:		case steward:
        6:  683:			stewardAction(choice1, choice2, choice3, handPos, currentPlayer, state);
        -:  684:	
        -:  685:	
        -:  686:	case council_room:
        -:  687://printf("\nin council room case\n"); 
        -:  688:	//+4 Cards
       60:  689:      for (i = 0; i < 4; i++)
        -:  690:	{
       24:  691:	  drawCard(currentPlayer, state);
       24:  692:	}
        -:  693://printf("\naf drawCard\n");			
        -:  694:      //+1 Buy
        6:  695:      state->numBuys++;
        -:  696://printf("\nbuys increased");	
        -:  697:      //Each other player draws a card
       36:  698:      for (i = 0; i < state->numPlayers; i++)
        -:  699:	{
       12:  700:	  if ( i != currentPlayer )
        -:  701:	    {
        6:  702:	      drawCard(i, state);
        6:  703:	    }
       12:  704:	}
        -:  705://printf("\nother player's cards drawn\n");	
        -:  706:      //put played card in played card pile
        6:  707:      discardCard(handPos, currentPlayer, state, 0);
        -:  708://printf("\nafter discard\n");	
        6:  709:      return 0;
        -:  710:			
        -:  711:    case feast:
        -:  712:      //gain card with cost up to 5
        -:  713:      //Backup hand
    #####:  714:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  715:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  716:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  717:      }
        -:  718:      //Backup hand
        -:  719:
        -:  720:      //Update Coins for Buy
    #####:  721:      updateCoins(currentPlayer, state, 5);
    #####:  722:      x = 1;//Condition to loop on
    #####:  723:      while( x == 1) {//Buy one card
    #####:  724:	if (supplyCount(choice1, state) <= 0){
        -:  725:	  if (DEBUG)
        -:  726:	    printf("None of that card left, sorry!\n");
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  730:	  }
    #####:  731:	}
    #####:  732:	else if (state->coins < getCost(choice1)){
    #####:  733:	  printf("That card is too expensive!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  737:	  }
    #####:  738:	}
        -:  739:	else{
        -:  740:
        -:  741:	  if (DEBUG){
        -:  742:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  743:	  }
        -:  744:
    #####:  745:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  746:	  x = 0;//No more buying cards
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
        -:  752:	}
        -:  753:      }     
        -:  754:
        -:  755:      //Reset Hand
    #####:  756:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  757:	state->hand[currentPlayer][i] = temphand[i];
    #####:  758:	temphand[i] = -1;
    #####:  759:      }
        -:  760:      //Reset Hand
        -:  761:      			
    #####:  762:      return 0;
        -:  763:			
        -:  764:    case gardens:
    #####:  765:      return -1;
        -:  766:			
        -:  767:    case mine:
    #####:  768:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  769:
    #####:  770:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:		
    #####:  775:      if (choice2 > treasure_map || choice2 < curse)
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  781:	{
    #####:  782:	  return -1;
        -:  783:	}
        -:  784:
    #####:  785:      gainCard(choice2, state, 2, currentPlayer);
        -:  786:
        -:  787:      //discard card from hand
    #####:  788:      discardCard(handPos, currentPlayer, state, 0);
        -:  789:
        -:  790:      //discard trashed card
    #####:  791:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  792:	{
    #####:  793:	  if (state->hand[currentPlayer][i] == j)
        -:  794:	    {
    #####:  795:	      discardCard(i, currentPlayer, state, 0);			
    #####:  796:	      break;
        -:  797:	    }
    #####:  798:	}
        -:  799:			
    #####:  800:      return 0;
        -:  801:			
        -:  802:    case remodel:
    #####:  803:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  804:
    #####:  805:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  806:	{
    #####:  807:	  return -1;
        -:  808:	}
        -:  809:
    #####:  810:      gainCard(choice2, state, 0, currentPlayer);
        -:  811:
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
        -:  814:
        -:  815:      //discard trashed card
    #####:  816:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  817:	{
    #####:  818:	  if (state->hand[currentPlayer][i] == j)
        -:  819:	    {
    #####:  820:	      discardCard(i, currentPlayer, state, 0);			
    #####:  821:	      break;
        -:  822:	    }
    #####:  823:	}
        -:  824:
        -:  825:
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case village:
        -:  829:      //+1 Card
        4:  830:      drawCard(currentPlayer, state);
        -:  831:			
        -:  832:      //+2 Actions
        4:  833:      state->numActions = state->numActions + 2;
        -:  834:			
        -:  835:      //discard played card from hand
        4:  836:      discardCard(handPos, currentPlayer, state, 0);
        4:  837:      return 0;
        -:  838:		
        -:  839:    case great_hall:
        -:  840:      //+1 Card
        4:  841:      drawCard(currentPlayer, state);
        -:  842:			
        -:  843:      //+1 Actions
        4:  844:      state->numActions++;
        -:  845:			
        -:  846:      //discard card from hand
        4:  847:      discardCard(handPos, currentPlayer, state, 0);
        4:  848:      return 0;
        -:  849:		
        -:  850:    case minion:
        -:  851:      //+1 action
    #####:  852:      state->numActions++;
        -:  853:			
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:			
    #####:  857:      if (choice1)		//+2 coins
        -:  858:	{
    #####:  859:	  state->coins = state->coins + 2;
    #####:  860:	}
        -:  861:			
    #####:  862:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  863:	{
        -:  864:	  //discard hand
    #####:  865:	  while(numHandCards(state) > 0)
        -:  866:	    {
    #####:  867:	      discardCard(handPos, currentPlayer, state, 0);
        -:  868:	    }
        -:  869:				
        -:  870:	  //draw 4
    #####:  871:	  for (i = 0; i < 4; i++)
        -:  872:	    {
    #####:  873:	      drawCard(currentPlayer, state);
    #####:  874:	    }
        -:  875:				
        -:  876:	  //other players discard hand and redraw if hand size > 4
    #####:  877:	  for (i = 0; i < state->numPlayers; i++)
        -:  878:	    {
    #####:  879:	      if (i != currentPlayer)
        -:  880:		{
    #####:  881:		  if ( state->handCount[i] > 4 )
        -:  882:		    {
        -:  883:		      //discard hand
    #####:  884:		      while( state->handCount[i] > 0 )
        -:  885:			{
    #####:  886:			  discardCard(handPos, i, state, 0);
        -:  887:			}
        -:  888:							
        -:  889:		      //draw 4
    #####:  890:		      for (j = 0; j < 4; j++)
        -:  891:			{
    #####:  892:			  drawCard(i, state);
    #####:  893:			}
    #####:  894:		    }
    #####:  895:		}
    #####:  896:	    }
        -:  897:				
    #####:  898:	}
    #####:  899:      return 0;
        -:  900:	
        -:  901:    case tribute:
    #####:  902:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  903:	if (state->deckCount[nextPlayer] > 0){
    #####:  904:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  905:	  state->deckCount[nextPlayer]--;
    #####:  906:	}
    #####:  907:	else if (state->discardCount[nextPlayer] > 0){
    #####:  908:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  909:	  state->discardCount[nextPlayer]--;
    #####:  910:	}
        -:  911:	else{
        -:  912:	  //No Card to Reveal
        -:  913:	  if (DEBUG){
        -:  914:	    printf("No cards to reveal\n");
        -:  915:	  }
        -:  916:	}
    #####:  917:      }
        -:  918:	    
        -:  919:      else{
    #####:  920:	if (state->deckCount[nextPlayer] == 0){
    #####:  921:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  922:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  923:	    state->deckCount[nextPlayer]++;
    #####:  924:	    state->discard[nextPlayer][i] = -1;
    #####:  925:	    state->discardCount[nextPlayer]--;
    #####:  926:	  }
        -:  927:			    
    #####:  928:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  929:	} 
    #####:  930:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  931:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  932:	state->deckCount[nextPlayer]--;
    #####:  933:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  934:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  935:	state->deckCount[nextPlayer]--;
        -:  936:      }    
        -:  937:		       
    #####:  938:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  939:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  940:	state->playedCardCount++;
    #####:  941:	tributeRevealedCards[1] = -1;
    #####:  942:      }
        -:  943:
    #####:  944:      for (i = 0; i <= 2; i ++){
    #####:  945:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  946:	  state->coins += 2;
    #####:  947:	}
        -:  948:		    
    #####:  949:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  950:	  drawCard(currentPlayer, state);
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	}
        -:  953:	else{//Action Card
    #####:  954:	  state->numActions = state->numActions + 2;
        -:  955:	}
    #####:  956:      }
        -:  957:	    
    #####:  958:      return 0;
        -:  959:		
        -:  960:    case ambassador:
    #####:  961:      j = 0;		//used to check if player has enough cards to discard
        -:  962:
    #####:  963:      if (choice2 > 2 || choice2 < 0)
        -:  964:	{
    #####:  965:	  return -1;				
        -:  966:	}
        -:  967:
    #####:  968:      if (choice1 == handPos)
        -:  969:	{
    #####:  970:	  return -1;
        -:  971:	}
        -:  972:
    #####:  973:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  974:	{
    #####:  975:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  976:	    {
    #####:  977:	      j++;
    #####:  978:	    }
    #####:  979:	}
    #####:  980:      if (j < choice2)
        -:  981:	{
    #####:  982:	  return -1;				
        -:  983:	}
        -:  984:
        -:  985:      if (DEBUG) 
        -:  986:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  987:
        -:  988:      //increase supply count for choosen card by amount being discarded
    #####:  989:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  990:			
        -:  991:      //each other player gains a copy of revealed card
    #####:  992:      for (i = 0; i < state->numPlayers; i++)
        -:  993:	{
    #####:  994:	  if (i != currentPlayer)
        -:  995:	    {
    #####:  996:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  997:	    }
    #####:  998:	}
        -:  999:
        -: 1000:      //discard played card from hand
    #####: 1001:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1002:
        -: 1003:      //trash copies of cards returned to supply
    #####: 1004:      for (j = 0; j < choice2; j++)
        -: 1005:	{
    #####: 1006:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1007:	    {
    #####: 1008:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1009:		{
    #####: 1010:		  discardCard(i, currentPlayer, state, 1);
    #####: 1011:		  break;
        -: 1012:		}
    #####: 1013:	    }
    #####: 1014:	}			
        -: 1015:
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
    #####: 1041:		}
        -: 1042:					
    #####: 1043:	    }
        -: 1044:				
    #####: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:	
        -: 1071:    case salvager:
        -: 1072:      //+1 buy
    #####: 1073:      state->numBuys++;
        -: 1074:			
    #####: 1075:      if (choice1)
        -: 1076:	{
        -: 1077:	  //gain coins equal to trashed card
    #####: 1078:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1079:	  //trash card
    #####: 1080:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1081:	}
        -: 1082:			
        -: 1083:      //discard card
    #####: 1084:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case sea_hag:
    #####: 1088:      for (i = 0; i < state->numPlayers; i++){
    #####: 1089:	if (i != currentPlayer){
    #####: 1090:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1091:	  state->discardCount[i]++;
    #####: 1092:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1093:	}
    #####: 1094:      }
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case treasure_map:
        -: 1098:      //search hand for another treasure_map
    #####: 1099:      index = -1;
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1103:	    {
    #####: 1104:	      index = i;
    #####: 1105:	      break;
        -: 1106:	    }
    #####: 1107:	}
    #####: 1108:      if (index > -1)
        -: 1109:	{
        -: 1110:	  //trash both treasure cards
    #####: 1111:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1112:	  discardCard(index, currentPlayer, state, 1);
        -: 1113:
        -: 1114:	  //gain 4 Gold cards
    #####: 1115:	  for (i = 0; i < 4; i++)
        -: 1116:	    {
    #####: 1117:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1118:	    }
        -: 1119:				
        -: 1120:	  //return success
    #####: 1121:	  return 1;
        -: 1122:	}
        -: 1123:			
        -: 1124:      //no second treasure_map found in hand
    #####: 1125:      return -1;
        -: 1126:    }
    #####: 1127:  return -1;
       24: 1128:}
        -: 1129:
        -: 1130:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1131:{
        -: 1132:	
        -: 1133:  //if card is not trashed, added to Played pile 
       38: 1134:  if (trashFlag < 1)
        -: 1135:    {
        -: 1136:      //add card to played pile
       26: 1137:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       26: 1138:      state->playedCardCount++;
       26: 1139:    }
        -: 1140:	
        -: 1141:  //set played card to -1
       38: 1142:  state->hand[currentPlayer][handPos] = -1;
        -: 1143:	
        -: 1144:  //remove card from player's hand
       38: 1145:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1146:    {
        -: 1147:      //reduce number of cards in hand
    #####: 1148:      state->handCount[currentPlayer]--;
    #####: 1149:    }
       38: 1150:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
    #####: 1153:      state->handCount[currentPlayer]--;
    #####: 1154:    }
        -: 1155:  else 	
        -: 1156:    {
        -: 1157:      //replace discarded card with last card in hand
       38: 1158:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1159:      //set last card to -1
       38: 1160:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1161:      //reduce number of cards in hand
       38: 1162:      state->handCount[currentPlayer]--;
        -: 1163:    }
        -: 1164:	
       38: 1165:  return 0;
        -: 1166:}
        -: 1167:
        -: 1168:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1169:{
        -: 1170:  //Note: supplyPos is enum of choosen card
        -: 1171:	
        -: 1172:  //check if supply pile is empty (0) or card is not used in game (-1)
       44: 1173:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1174:    {
    #####: 1175:      return -1;
        -: 1176:    }
        -: 1177:	
        -: 1178:  //added card for [whoseTurn] current player:
        -: 1179:  // toFlag = 0 : add to discard
        -: 1180:  // toFlag = 1 : add to deck
        -: 1181:  // toFlag = 2 : add to hand
        -: 1182:
       44: 1183:  if (toFlag == 1)
        -: 1184:    {
        8: 1185:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        8: 1186:      state->deckCount[player]++;
        8: 1187:    }
       36: 1188:  else if (toFlag == 2)
        -: 1189:    {
    #####: 1190:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1191:      state->handCount[player]++;
    #####: 1192:    }
        -: 1193:  else
        -: 1194:    {
       36: 1195:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       36: 1196:      state->discardCount[player]++;
        -: 1197:    }
        -: 1198:	
        -: 1199:  //decrease number in supply pile
       44: 1200:  state->supplyCount[supplyPos]--;
        -: 1201:	 
       44: 1202:  return 0;
       44: 1203:}
        -: 1204:
        -: 1205:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1206:{
        -: 1207:  int i;
        -: 1208:	
        -: 1209:  //reset coin count
      105: 1210:  state->coins = 0;
        -: 1211:
        -: 1212:  //add coins for each Treasure card in player's hand
     1308: 1213:  for (i = 0; i < state->handCount[player]; i++)
        -: 1214:    {
      549: 1215:      if (state->hand[player][i] == copper)
        -: 1216:	{
      368: 1217:	  state->coins += 1;
      368: 1218:	}
      181: 1219:      else if (state->hand[player][i] == silver)
        -: 1220:	{
       40: 1221:	  state->coins += 2;
       40: 1222:	}
      141: 1223:      else if (state->hand[player][i] == gold)
        -: 1224:	{
        5: 1225:	  state->coins += 3;
        5: 1226:	}	
      549: 1227:    }	
        -: 1228:
        -: 1229:  //add bonus
      105: 1230:  state->coins += bonus;
        -: 1231:
      105: 1232:  return 0;
        -: 1233:}
        -: 1234:
        -: 1235://----------------------------------------------------------------------------------
        -: 1236://---------------------Added refactored code for assignment 2-----------------------
        -: 1237://----------------------------------------------------------------------------------
        -: 1238:
        -: 1239:int adventurerAction(int handPos, int currentPlayer, int drawntreasure, struct gameState *state)
        -: 1240:{  
       10: 1241:	int z = 0, temphand[MAX_HAND];
       10: 1242:	int totalDrawn = 0;
        -: 1243:
        -: 1244:
      144: 1245:	while(drawntreasure<4){		//changed from a 2 to a 4 here
       62: 1246:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        9: 1247:	  shuffle(currentPlayer, state);
        9: 1248:	}
       62: 1249:	drawCard(currentPlayer, state);
       62: 1250:	totalDrawn++;	//increment amount of cards drawn
        -: 1251:
       62: 1252:	int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      116: 1253:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       40: 1254:	  drawntreasure++;
        -: 1255:	else{
       22: 1256:	  temphand[z]=cardDrawn;
       22: 1257:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       22: 1258:	  z++;
        -: 1259:	}
        -: 1260:      }
       64: 1261:      while(z-1>=0){
       22: 1262:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       22: 1263:	z=z-1;
        -: 1264:      }
       10: 1265:      return totalDrawn;
        -: 1266:}			
        -: 1267:
        -: 1268:int baronAction(int choice1, int currentPlayer, struct gameState *state)
        -: 1269:{
    #####: 1270:      state->numBuys++;//Increase buys by 1!
    #####: 1271:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1272:	int p = 0;//Iterator for hand!
    #####: 1273:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1274:	while(card_not_discarded){
    #####: 1275:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1276:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1277:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1278:	    state->discardCount[currentPlayer]++;
    #####: 1279:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1280:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1281:	    }
    #####: 1282:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1283:	    state->handCount[currentPlayer]--;
    #####: 1284:	    card_not_discarded = 0;//Exit the loop
    #####: 1285:	  }
    #####: 1286:	  else if (p > state->handCount[currentPlayer]){
        -: 1287:	    if(DEBUG) {
        -: 1288:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1289:	      printf("Must gain an estate if there are any\n");
        -: 1290:	    }
    #####: 1291:	    if (supplyCount(estate, state) > 0){
    #####: 1292:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1293:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1294:	      if (supplyCount(estate, state) == 0){
    #####: 1295:		isGameOver(state);
    #####: 1296:	      }
    #####: 1297:	    }
    #####: 1298:	    card_not_discarded = 0;//Exit the loop
    #####: 1299:	  }
        -: 1300:			    
        -: 1301:	  else{
    #####: 1302:	    p++;//Next card
        -: 1303:	  }
        -: 1304:	}
    #####: 1305:      }
        -: 1306:			    
        -: 1307:      else{
    #####: 1308:	if (supplyCount(estate, state) > 0){
    #####: 1309:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1310:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1311:	  if (supplyCount(estate, state) == 0){
    #####: 1312:	    isGameOver(state);
    #####: 1313:	  }
    #####: 1314:	}
        -: 1315:      }
        -: 1316:	    
        -: 1317:      
    #####: 1318:      return 0;
        -: 1319:}	
        -: 1320:
        -: 1321:int outpostAction(int handPos, int currentPlayer, struct gameState *state)
        -: 1322:{    
        -: 1323: 	 //set outpost flag
    #####: 1324:      state->outpostPlayed++;
        -: 1325:			
        -: 1326:      //discard card
    #####: 1327:      discardCard(handPos, currentPlayer, state, 1);	//changed 0 to 1 here
    #####: 1328:      return 0;
        -: 1329:}	
        -: 1330:
        -: 1331:int smithyAction(int handPos, int currentPlayer, struct gameState *state)
        -: 1332:{
        -: 1333:	int i;
        -: 1334:
        -: 1335://printf("hand count in saction before draw: %d\n", state->handCount[currentPlayer]);
        -: 1336:
        -: 1337:      //+3 Cards
       36: 1338:      for (i = 0; i < 2; i++)	//changed 3 to 2 here
        -: 1339:		{
       12: 1340:		  drawCard(currentPlayer, state);
       12: 1341:		}
        -: 1342://printf("hand count in saction: %d\n", state->handCount[currentPlayer]);
        -: 1343:		
        -: 1344:      //discard card from hand
        6: 1345:      discardCard(handPos, currentPlayer, state, 0);
        -: 1346:
        -: 1347://printf("hand count in saction after discard: %d\n", state->handCount[currentPlayer]);
        -: 1348:
        6: 1349:      return 0;
        -: 1350:}
        -: 1351:
        -: 1352:int stewardAction(int choice1, int choice2, int choice3, int handPos,
        -: 1353:	 int currentPlayer, struct gameState *state)
        -: 1354:{
        6: 1355:      if (choice1 == 1)
        -: 1356:	{
        -: 1357:	  //+2 cards
    #####: 1358:	  drawCard(currentPlayer, state);
    #####: 1359:	  drawCard(currentPlayer, state);
    #####: 1360:	}
        6: 1361:      else if (choice1 == 3)	//changed from 2 to 3 here
        -: 1362:	{
        -: 1363:	  //+2 coins
    #####: 1364:	  state->coins = state->coins + 2;
    #####: 1365:	}
        -: 1366:      else
        -: 1367:	{
        -: 1368:	  //trash 2 cards in hand
        6: 1369:	  discardCard(choice2, currentPlayer, state, 1);
        6: 1370:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1371:	}
        -: 1372:			
        -: 1373:      //discard card from hand
        6: 1374:      discardCard(handPos, currentPlayer, state, 0);
        6: 1375:      return 0;
        -: 1376:}
        -: 1377:
        -: 1378:
        -: 1379://end of dominion.c
        -: 1380:
