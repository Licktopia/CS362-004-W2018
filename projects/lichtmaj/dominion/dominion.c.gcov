        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:397
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 336441 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   336441:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 2%
branch  1 taken 98%
     5206:   10:    return 1;
   331235:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 37%
branch  1 taken 63%
   121211:   12:    return -1;
   210024:   13:  return 0;
   336441:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9364 returned 100% blocks executed 94%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;     
        -:   43:  //set up random number generator
     9364:   44:  SelectStream(1);
     9364:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    18728:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     9364:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   206008:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
  2060080:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
  1779160:   61:    if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
   936400:   65:        }
    93640:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     9364:   73:  if (numPlayers == 2)
branch  0 taken 54%
branch  1 taken 46%
        -:   74:    {
     5047:   75:      state->supplyCount[curse] = 10;
     5047:   76:    }
     4317:   77:  else if (numPlayers == 3)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
     4317:   79:      state->supplyCount[curse] = 20;
     4317:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     9364:   87:  if (numPlayers == 2)
branch  0 taken 54%
branch  1 taken 46%
        -:   88:    {
     5047:   89:      state->supplyCount[estate] = 8;
     5047:   90:      state->supplyCount[duchy] = 8;
     5047:   91:      state->supplyCount[province] = 8;
     5047:   92:    }
        -:   93:  else
        -:   94:    {
     4317:   95:      state->supplyCount[estate] = 12;
     4317:   96:      state->supplyCount[duchy] = 12;
     4317:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     9364:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9364:  102:  state->supplyCount[silver] = 40;
     9364:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   393288:  106:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
  3090120:  108:      for (j = 0; j < 10; j++)              //loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:  {
  1451420:  110:    if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
   186078:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 99%
        -:  114:    {
     2419:  115:      if (numPlayers == 2){ 
branch  0 taken 86%
branch  1 taken 14%
     2081:  116:        state->supplyCount[i] = 8; 
     2081:  117:      }
      338:  118:      else{ state->supplyCount[i] = 12; }
     2419:  119:    }
        -:  120:        else
        -:  121:    {
    91221:  122:      state->supplyCount[i] = 10;
        -:  123:    }
    93640:  124:        break;
        -:  125:      }
        -:  126:    else    //card is not in the set choosen for the game
        -:  127:      {
  1357780:  128:        state->supplyCount[i] = -1;
        -:  129:      }
  1357780:  130:  }
        -:  131:
   187280:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    64818:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  139:    {
    23045:  140:      state->deckCount[i] = 0;
   184360:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:  {
    69135:  143:    state->deck[i][j] = estate;
    69135:  144:    state->deckCount[i]++;
    69135:  145:  }
   368720:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:  {
   161315:  148:    state->deck[i][j] = copper;
   161315:  149:    state->deckCount[i]++;    
   161315:  150:  }
    23045:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    64818:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  155:    {
    23045:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:  {
    #####:  158:    return -1;
        -:  159:  }
    23045:  160:    }
        -:  161:
        -:  162:  //draw player hands
    64818:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    23045:  166:      state->handCount[i] = 0;
    23045:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //    drawCard(i, state);
        -:  172:      //  }
    23045:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   524384:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
   252828:  178:      state->embargoTokens[i] = 0;
   252828:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     9364:  182:  state->outpostPlayed = 0;
     9364:  183:  state->phase = 0;
     9364:  184:  state->numActions = 1;
     9364:  185:  state->numBuys = 1;
     9364:  186:  state->playedCardCount = 0;
     9364:  187:  state->whoseTurn = 0;
     9364:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   112368:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
    46820:  193:    drawCard(state->whoseTurn, state);
    46820:  194:  }
        -:  195:
     9364:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     9364:  198:  return 0;
     9364:  199:}
        -:  200:
function shuffle called 23498 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    23498:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    23498:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
      229:  210:    return -1;
    23269:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   515518:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
   234490:  215:    card = floor(Random() * state->deckCount[player]);
   234490:  216:    newDeck[newDeckPos] = state->deck[player][card];
   234490:  217:    newDeckPos++;
  1711654:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 73%
branch  1 taken 27%
   621337:  219:      state->deck[player][i] = state->deck[player][i+1];
   621337:  220:    }
   234490:  221:    state->deckCount[player]--;
        -:  222:  }
   515518:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
   234490:  224:    state->deck[player][i] = newDeck[i];
   234490:  225:    state->deckCount[player]++;
   234490:  226:  }
        -:  227:
    23269:  228:  return 0;
    23498:  229:}
        -:  230:
function playCard called 589 returned 100% blocks executed 75%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{ 
        -:  233:  int card;
      589:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      589:  237:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:  
        -:  242:  //check if player has enough actions
      589:  243:  if ( state->numActions < 1 )
branch  0 taken 82%
branch  1 taken 18%
        -:  244:    {
      485:  245:      return -1;
        -:  246:    }
        -:  247:  
        -:  248:  //get card played
      104:  249:  card = handCard(handPos, state);
        -:  250:  
        -:  251:  //check if selected card is an action
      208:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //play card
      104:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:  
        -:  263:  //reduce number of actions
      104:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      104:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:  
      104:  269:  return 0;
      589:  270:}
        -:  271:
function buyCard called 812 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      812:  280:  who = state->whoseTurn;
        -:  281:
      812:  282:  if (state->numBuys < 1){
branch  0 taken 6%
branch  1 taken 94%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
       52:  285:    return -1;
      760:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 7%
branch  1 taken 93%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       52:  289:    return -1;
      708:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 8%
branch  1 taken 92%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       54:  293:    return -1;
        -:  294:  } else {
      654:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      654:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      654:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      654:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      654:  308:  return 0;
      812:  309:}
        -:  310:
function numHandCards called 4415 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
     4415:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 8742 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
     8742:  316:  int currentPlayer = whoseTurn(state);
     8742:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1682 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
     1682:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 22714 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
    22714:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 646 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      646:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     8170:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16%
     3439:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     3439:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
     3439:  359:  }
      646:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      646:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 54%
branch  1 taken 46%
      348:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
      348:  365:  }
        -:  366:  else{
      298:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      646:  370:  state->outpostPlayed = 0;
      646:  371:  state->phase = 0;
      646:  372:  state->numActions = 1;
      646:  373:  state->coins = 0;
      646:  374:  state->numBuys = 1;
      646:  375:  state->playedCardCount = 0;
      646:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     7752:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
     3230:  381:    drawCard(state->whoseTurn, state);//Draw a card
     3230:  382:  }
        -:  383:
        -:  384:  //Update money
      646:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      646:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 732 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:  
        -:  394:  //if stack of Province cards is empty, the game ends
      732:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 7%
branch  1 taken 93%
        -:  396:    {
       54:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      678:  401:  j = 0;
    35256:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
    16950:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 1%
branch  1 taken 99%
        -:  405:  {
      120:  406:    j++;
      120:  407:  }
    16950:  408:    }
      678:  409:  if ( j >= 3)
branch  0 taken 6%
branch  1 taken 94%
        -:  410:    {
       40:  411:      return 1;
        -:  412:    }
        -:  413:
      638:  414:  return 0;
      732:  415:}
        -:  416:
function scoreFor called 30 returned 100% blocks executed 76%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       30:  420:  int score = 0;
        -:  421:  //score from hand
      210:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  423:    {
       75:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
       75:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       75:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
       88:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17%
branch  1 taken 83%
       75:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       75:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
       75:  430:    }
        -:  431:
        -:  432:  //score from discard
     1180:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5%
        -:  434:    {
      560:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
      622:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 11%
branch  1 taken 89%
      560:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
      640:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 14%
branch  1 taken 86%
      560:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
      560:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
      560:  441:    }
        -:  442:
        -:  443:  //score from deck
     1180:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5%
        -:  445:    {
      572:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 2%
branch  1 taken 98%
      621:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 11%
branch  1 taken 89%
      560:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
      606:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 8%
branch  1 taken 92%
      560:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
      560:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
      560:  452:    }
        -:  453:
       30:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;  
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:  {
    #####:  469:    players[i] = -9999;
    #####:  470:  }
        -:  471:      else
        -:  472:  {
    #####:  473:    players[i] = scoreFor (i, state);
        -:  474:  }
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:  {
    #####:  483:    j = i;
    #####:  484:  }
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:  {
    #####:  494:    players[i]++;
    #####:  495:  }
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:  {
    #####:  504:    j = i;
    #####:  505:  }
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:  {
    #####:  514:    players[i] = 1;
    #####:  515:  }
        -:  516:      else
        -:  517:  {
    #####:  518:    players[i] = 0;
        -:  519:  }
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 56794 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:  int deckCounter;
    56794:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     8986:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 90%
branch  1 taken 10%
     4040:  534:      state->deck[player][i] = state->discard[player][i];
     4040:  535:      state->discard[player][i] = -1;
     4040:  536:    }
        -:  537:
      453:  538:    state->deckCount[player] = state->discardCount[player];
      453:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      453:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      453:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      453:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      453:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      453:  559:    if (deckCounter == 0)
branch  0 taken 51%
branch  1 taken 49%
      229:  560:      return -1;
        -:  561:
      224:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      224:  563:    state->deckCount[player]--;
      224:  564:    state->handCount[player]++;//Increment hand count
      224:  565:  }
        -:  566:
        -:  567:  else{
    56341:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    56341:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    56341:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    56341:  576:    state->deckCount[player]--;
    56341:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    56565:  580:  return 0;
    56794:  581:}
        -:  582:
function getCost called 1362 returned 100% blocks executed 29%
        -:  583:int getCost(int cardNumber)
        -:  584:{
     1362:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 18%
branch  4 taken 0%
branch  5 taken 39%
branch  6 taken 22%
branch  7 taken 4%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 12%
branch 12 taken 0%
branch 13 taken 4%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
      240:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
      534:  598:      return 3;
        -:  599:    case gold:
      300:  600:      return 6;
        -:  601:    case adventurer:
       60:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
      168:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
       60:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:  
    #####:  643:  return -1;
     1362:  644:}
        -:  645:
function adventurerCard called 4106 returned 100% blocks executed 80%
        -:  646:int adventurerCard(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  647:{
     8224:  648:  while(drawntreasure>2){
branch  0 taken 1%
branch  1 taken 99%
        6:  649:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####:  650:          shuffle(currentPlayer, state);
    #####:  651:        }
        6:  652:        drawCard(currentPlayer, state);
        6:  653:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       10:  654:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33%
branch  1 taken 67%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
        6:  655:          drawntreasure++;
        -:  656:        else{
    #####:  657:          temphand[z]=cardDrawn;
    #####:  658:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:          z++;
        -:  660:        }
        -:  661:      }
     8212:  662:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
    #####:  663:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  664:        z=z-1;
        -:  665:      }
     4106:  666:      return 0;
        -:  667:}
        -:  668:
function smithyCard called 68 returned 100% blocks executed 100%
        -:  669:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  670:{
        -:  671:     //+3 Cards
     1440:  672:      for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  673:        {
      652:  674:          drawCard(currentPlayer, state);
      652:  675:        }
        -:  676:      
        -:  677:      //discard card from hand
       68:  678:      discardCard(handPos, currentPlayer, state, 0);
       68:  679:      return 0;
        -:  680:}
        -:  681:
function embargoCard called 0 returned 0% blocks executed 0%
        -:  682:int embargoCard(struct gameState *state, int choice1, int handPos, int currentPlayer)
        -:  683:{
        -:  684:  //+2 Coins
    #####:  685:      state->coins = state->coins + 2;
        -:  686:      
        -:  687:      //see if selected pile is in play
    #####:  688:      if ( state->supplyCount[choice1] == 1 )
branch  0 never executed
branch  1 never executed
        -:  689:        {
    #####:  690:          return -1;
        -:  691:        }
        -:  692:      
        -:  693:      //add embargo token to selected supply pile
    #####:  694:      state->embargoTokens[choice1]++;
        -:  695:      
        -:  696:      //trash card
    #####:  697:      discardCard(handPos, currentPlayer, state, 1);    
    #####:  698:      return 0;
    #####:  699:}
        -:  700:
function councilRoomCard called 0 returned 0% blocks executed 0%
        -:  701:int councilRoomCard(int currentPlayer, struct gameState *state, int i, int handPos){
        -:  702:    //+4 Cards
    #####:  703:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  704:        {
    #####:  705:          drawCard(currentPlayer, state);
    #####:  706:        }
        -:  707:            
        -:  708:            //+1 Buy
    #####:  709:            state->numBuys++;
        -:  710:            
        -:  711:            //Each other player draws a card
    #####:  712:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  713:        {
    #####:  714:          if ( i == currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  715:            {
    #####:  716:              drawCard(i, state);
    #####:  717:            }
    #####:  718:        }
        -:  719:      
        -:  720:      //put played card in played card pile
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
        -:  722:      
    #####:  723:      return 0;
        -:  724:}
        -:  725:
function villiageCard called 2535 returned 100% blocks executed 100%
        -:  726:int villiageCard(int currentPlayer, struct gameState *state, int handPos) 
        -:  727:    {
        -:  728:      //+1 Card
     2535:  729:      drawCard(currentPlayer, state);
        -:  730:      
        -:  731:      //+2 Actions
     2535:  732:      state->numActions = state->numActions + 2;
        -:  733:      
        -:  734:      //discard played card from hand
     2535:  735:      discardCard(handPos, currentPlayer, state, 0);
     2535:  736:      return 0;
        -:  737:    }
        -:  738:
function cardEffect called 8314 returned 100% blocks executed 7%
        -:  739:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  740:{
        -:  741:  int i;
        -:  742:  int j;
        -:  743:  int k;
        -:  744:  int x;
        -:  745:  int index;
     8314:  746:  int currentPlayer = whoseTurn(state);
     8314:  747:  int nextPlayer = currentPlayer + 1;
        -:  748:
     8314:  749:  int tributeRevealedCards[2] = {-1, -1};
        -:  750:  int temphand[MAX_HAND];// moved above the if statement
     8314:  751:  int drawntreasure=0;
        -:  752:  int cardDrawn;
     8314:  753:  int z = 0;// this is the counter for the temp hand
     8314:  754:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1%
branch  1 taken 99%
       74:  755:    nextPlayer = 0;
       74:  756:  }
        -:  757:  
        -:  758:  
        -:  759:  //uses switch to select card and perform actions
     8314:  760:  switch( card ) 
branch  0 taken 49%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 30%
branch  8 taken 0%
branch  9 taken 18%
branch 10 taken 0%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  761:    {
        -:  762:    case adventurer:
     4106:  763:    return adventurerCard(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  764:      
        -:  765:    case council_room:
    #####:  766:    return councilRoomCard(currentPlayer, state, i, handPos);
        -:  767:    
        -:  768:      
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  773:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:  state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
    #####:  779:      updateCoins(currentPlayer, state, 5);
    #####:  780:      x = 1;//Condition to loop on
    #####:  781:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  782:  if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  783:    if (DEBUG)
        -:  784:      printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:    if (DEBUG){
        -:  787:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:    }
    #####:  789:  }
    #####:  790:  else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  791:    printf("That card is too expensive!\n");
        -:  792:
        -:  793:    if (DEBUG){
        -:  794:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:    }
    #####:  796:  }
        -:  797:  else{
        -:  798:
        -:  799:    if (DEBUG){
        -:  800:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:    }
        -:  802:
    #####:  803:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:    x = 0;//No more buying cards
        -:  805:
        -:  806:    if (DEBUG){
        -:  807:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:    }
        -:  809:
        -:  810:  }
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  815:  state->hand[currentPlayer][i] = temphand[i];
    #####:  816:  temphand[i] = -1;
    #####:  817:      }
        -:  818:      //Reset Hand
        -:  819:            
    #####:  820:      return 0;
        -:  821:      
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:      
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  829:  {
    #####:  830:    return -1;
        -:  831:  }
        -:  832:    
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:  {
    #####:  835:    return -1;
        -:  836:  }
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  839:  {
    #####:  840:    return -1;
        -:  841:  }
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  850:  {
    #####:  851:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  852:      {
    #####:  853:        discardCard(i, currentPlayer, state, 0);      
    #####:  854:        break;
        -:  855:      }
    #####:  856:  }
        -:  857:      
    #####:  858:      return 0;
        -:  859:      
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  864:  {
    #####:  865:    return -1;
        -:  866:  }
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  875:  {
    #####:  876:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  877:      {
    #####:  878:        discardCard(i, currentPlayer, state, 0);      
    #####:  879:        break;
        -:  880:      }
    #####:  881:  }
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:    
        -:  886:    case smithy:
       68:  887:    return smithyCard(i, currentPlayer, state, handPos);
        -:  888:   
        -:  889:    
        -:  890:    case village:
     2535:  891:    return villiageCard(currentPlayer, state, handPos);
        -:  892:    
        -:  893:    case baron:
    #####:  894:      state->numBuys++;//Increase buys by 1!
    #####:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  896:  int p = 0;//Iterator for hand!
    #####:  897:  int card_not_discarded = 1;//Flag for discard set!
    #####:  898:  while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  899:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  900:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:      state->discardCount[currentPlayer]++;
    #####:  903:      for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  904:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  905:      }
    #####:  906:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:      state->handCount[currentPlayer]--;
    #####:  908:      card_not_discarded = 0;//Exit the loop
    #####:  909:    }
    #####:  910:    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  911:      if(DEBUG) {
        -:  912:        printf("No estate cards in your hand, invalid choice\n");
        -:  913:        printf("Must gain an estate if there are any\n");
        -:  914:      }
    #####:  915:      if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  916:        gainCard(estate, state, 0, currentPlayer);
    #####:  917:        state->supplyCount[estate]--;//Decrement estates
    #####:  918:        if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  919:    isGameOver(state);
    #####:  920:        }
    #####:  921:      }
    #####:  922:      card_not_discarded = 0;//Exit the loop
    #####:  923:    }
        -:  924:          
        -:  925:    else{
    #####:  926:      p++;//Next card
        -:  927:    }
        -:  928:  }
    #####:  929:      }
        -:  930:          
        -:  931:      else{
    #####:  932:  if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  933:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  934:    state->supplyCount[estate]--;//Decrement Estates
    #####:  935:    if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  936:      isGameOver(state);
    #####:  937:    }
    #####:  938:  }
        -:  939:      }
        -:  940:      
        -:  941:      
    #####:  942:      return 0;
        -:  943:    
        -:  944:    case great_hall:
        -:  945:      //+1 Card
     1533:  946:      drawCard(currentPlayer, state);
        -:  947:      
        -:  948:      //+1 Actions
     1533:  949:      state->numActions++;
        -:  950:      
        -:  951:      //discard card from hand
     1533:  952:      discardCard(handPos, currentPlayer, state, 0);
     1533:  953:      return 0;
        -:  954:    
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:      
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
        -:  961:      
    #####:  962:      if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:  {
    #####:  964:    state->coins = state->coins + 2;
    #####:  965:  }
        -:  966:      
    #####:  967:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  968:  {
        -:  969:    //discard hand
    #####:  970:    while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  971:      {
    #####:  972:        discardCard(handPos, currentPlayer, state, 0);
        -:  973:      }
        -:  974:        
        -:  975:    //draw 4
    #####:  976:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  977:      {
    #####:  978:        drawCard(currentPlayer, state);
    #####:  979:      }
        -:  980:        
        -:  981:    //other players discard hand and redraw if hand size > 4
    #####:  982:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:      {
    #####:  984:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:    {
    #####:  986:      if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  987:        {
        -:  988:          //discard hand
    #####:  989:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  990:      {
    #####:  991:        discardCard(handPos, i, state, 0);
        -:  992:      }
        -:  993:              
        -:  994:          //draw 4
    #####:  995:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  996:      {
    #####:  997:        drawCard(i, state);
    #####:  998:      }
    #####:  999:        }
    #####: 1000:    }
    #####: 1001:      }
        -: 1002:        
    #####: 1003:  }
    #####: 1004:      return 0;
        -: 1005:    
        -: 1006:    case steward:
       72: 1007:      if (choice1 == 1)
branch  0 taken 13%
branch  1 taken 88%
        -: 1008:  {
        -: 1009:    //+2 cards
        9: 1010:    drawCard(currentPlayer, state);
        9: 1011:    drawCard(currentPlayer, state);
        9: 1012:  }
       63: 1013:      else if (choice1 == 2)
branch  0 taken 14%
branch  1 taken 86%
        -: 1014:  {
        -: 1015:    //+2 coins
        9: 1016:    state->coins = state->coins + 2;
        9: 1017:  }
        -: 1018:      else
        -: 1019:  {
        -: 1020:    //trash 2 cards in hand
       54: 1021:    discardCard(choice2, currentPlayer, state, 1);
       54: 1022:    discardCard(choice3, currentPlayer, state, 1);
        -: 1023:  }
        -: 1024:      
        -: 1025:      //discard card from hand
       72: 1026:      discardCard(handPos, currentPlayer, state, 0);
       72: 1027:      return 0;
        -: 1028:    
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1031:  if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1032:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:    state->deckCount[nextPlayer]--;
    #####: 1034:  }
    #####: 1035:  else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:    state->discardCount[nextPlayer]--;
    #####: 1038:  }
        -: 1039:  else{
        -: 1040:    //No Card to Reveal
        -: 1041:    if (DEBUG){
        -: 1042:      printf("No cards to reveal\n");
        -: 1043:    }
        -: 1044:  }
    #####: 1045:      }
        -: 1046:      
        -: 1047:      else{
    #####: 1048:  if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1049:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1050:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:      state->deckCount[nextPlayer]++;
    #####: 1052:      state->discard[nextPlayer][i] = -1;
    #####: 1053:      state->discardCount[nextPlayer]--;
    #####: 1054:    }
        -: 1055:          
    #####: 1056:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1057:  } 
    #####: 1058:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:  state->deckCount[nextPlayer]--;
    #####: 1061:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:  state->deckCount[nextPlayer]--;
        -: 1064:      }    
        -: 1065:           
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1067:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:  state->playedCardCount++;
    #####: 1069:  tributeRevealedCards[1] = -1;
    #####: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1073:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1074:    state->coins += 2;
    #####: 1075:  }
        -: 1076:        
    #####: 1077:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1078:    drawCard(currentPlayer, state);
    #####: 1079:    drawCard(currentPlayer, state);
    #####: 1080:  }
        -: 1081:  else{//Action Card
    #####: 1082:    state->numActions = state->numActions + 2;
        -: 1083:  }
    #####: 1084:      }
        -: 1085:      
    #####: 1086:      return 0;
        -: 1087:    
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;    //used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1092:  {
    #####: 1093:    return -1;        
        -: 1094:  }
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1097:  {
    #####: 1098:    return -1;
        -: 1099:  }
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:  {
    #####: 1103:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1104:      {
    #####: 1105:        j++;
    #####: 1106:      }
    #####: 1107:  }
    #####: 1108:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1109:  {
    #####: 1110:    return -1;        
        -: 1111:  }
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:      
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:  {
    #####: 1122:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1123:      {
    #####: 1124:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1125:      }
    #####: 1126:  }
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1133:  {
    #####: 1134:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1135:      {
    #####: 1136:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1137:    {
    #####: 1138:      discardCard(i, currentPlayer, state, 1);
    #####: 1139:      break;
        -: 1140:    }
    #####: 1141:      }
    #####: 1142:  }     
        -: 1143:
    #####: 1144:      return 0;
        -: 1145:    
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1150:  {
    #####: 1151:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1152:      {
    #####: 1153:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1154:    {
    #####: 1155:      if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1156:        {
    #####: 1157:          discardCard(j, i, state, 0);
    #####: 1158:          break;
        -: 1159:        }
    #####: 1160:      if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1161:        {
    #####: 1162:          for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1163:      {
        -: 1164:        if (DEBUG)
        -: 1165:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1166:      } 
    #####: 1167:          break;
        -: 1168:        }   
    #####: 1169:    }
        -: 1170:          
    #####: 1171:      }
        -: 1172:        
    #####: 1173:  }       
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:    case embargo: 
    #####: 1181:    return embargoCard(state, choice1, handPos, currentPlayer);
        -: 1182:      
        -: 1183:    
        -: 1184:    case outpost:
        -: 1185:      //set outpost flag
    #####: 1186:      state->outpostPlayed++;
        -: 1187:      
        -: 1188:      //discard card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1190:      return 0;
        -: 1191:    
        -: 1192:    case salvager:
        -: 1193:      //+1 buy
    #####: 1194:      state->numBuys++;
        -: 1195:      
    #####: 1196:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1197:  {
        -: 1198:    //gain coins equal to trashed card
    #####: 1199:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1200:    //trash card
    #####: 1201:    discardCard(choice1, currentPlayer, state, 1);  
    #####: 1202:  }
        -: 1203:      
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1206:      return 0;
        -: 1207:    
        -: 1208:    case sea_hag:
    #####: 1209:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1210:  if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1211:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1212:    state->discardCount[i]++;
    #####: 1213:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1214:  }
    #####: 1215:      }
    #####: 1216:      return 0;
        -: 1217:    
        -: 1218:    case treasure_map:
        -: 1219:      //search hand for another treasure_map
    #####: 1220:      index = -1;
    #####: 1221:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1222:  {
    #####: 1223:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1224:      {
    #####: 1225:        index = i;
    #####: 1226:        break;
        -: 1227:      }
    #####: 1228:  }
    #####: 1229:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1230:  {
        -: 1231:    //trash both treasure cards
    #####: 1232:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1233:    discardCard(index, currentPlayer, state, 1);
        -: 1234:
        -: 1235:    //gain 4 Gold cards
    #####: 1236:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:      {
    #####: 1238:        gainCard(gold, state, 1, currentPlayer);
    #####: 1239:      }
        -: 1240:        
        -: 1241:    //return success
    #####: 1242:    return 1;
        -: 1243:  }
        -: 1244:      
        -: 1245:      //no second treasure_map found in hand
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:  
    #####: 1249:  return -1;
     8314: 1250:}
        -: 1251:
function discardCard called 4316 returned 100% blocks executed 90%
        -: 1252:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1253:{
        -: 1254:  
        -: 1255:  //if card is not trashed, added to Played pile 
     4316: 1256:  if (trashFlag < 1)
branch  0 taken 97%
branch  1 taken 3%
        -: 1257:    {
        -: 1258:      //add card to played pile
     4208: 1259:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4208: 1260:      state->playedCardCount++;
     4208: 1261:    }
        -: 1262:  
        -: 1263:  //set played card to -1
     4316: 1264:  state->hand[currentPlayer][handPos] = -1;
        -: 1265:  
        -: 1266:  //remove card from player's hand
     4316: 1267:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
       63: 1270:      state->handCount[currentPlayer]--;
       63: 1271:    }
     4253: 1272:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
    #####: 1275:      state->handCount[currentPlayer]--;
    #####: 1276:    }
        -: 1277:  else  
        -: 1278:    {
        -: 1279:      //replace discarded card with last card in hand
     4253: 1280:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1281:      //set last card to -1
     4253: 1282:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1283:      //reduce number of cards in hand
     4253: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  
     4316: 1287:  return 0;
        -: 1288:}
        -: 1289:
function gainCard called 922 returned 100% blocks executed 81%
        -: 1290:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1291:{
        -: 1292:  //Note: supplyPos is enum of choosen card
        -: 1293:  
        -: 1294:  //check if supply pile is empty (0) or card is not used in game (-1)
      922: 1295:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1296:    {
    #####: 1297:      return -1;
        -: 1298:    }
        -: 1299:  
        -: 1300:  //added card for [whoseTurn] current player:
        -: 1301:  // toFlag = 0 : add to discard
        -: 1302:  // toFlag = 1 : add to deck
        -: 1303:  // toFlag = 2 : add to hand
        -: 1304:
      922: 1305:  if (toFlag == 1)
branch  0 taken 15%
branch  1 taken 85%
        -: 1306:    {
      134: 1307:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      134: 1308:      state->deckCount[player]++;
      134: 1309:    }
      788: 1310:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1311:    {
    #####: 1312:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1313:      state->handCount[player]++;
    #####: 1314:    }
        -: 1315:  else
        -: 1316:    {
      788: 1317:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      788: 1318:      state->discardCount[player]++;
        -: 1319:    }
        -: 1320:  
        -: 1321:  //decrease number in supply pile
      922: 1322:  state->supplyCount[supplyPos]--;
        -: 1323:   
      922: 1324:  return 0;
      922: 1325:}
        -: 1326:
function updateCoins called 11812 returned 100% blocks executed 100%
        -: 1327:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1328:{
        -: 1329:  int i;
        -: 1330:  
        -: 1331:  //reset coin count
    11812: 1332:  state->coins = 0;
        -: 1333:
        -: 1334:  //add coins for each Treasure card in player's hand
   135562: 1335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1336:    {
    55969: 1337:      if (state->hand[player][i] == copper)
branch  0 taken 66%
branch  1 taken 34%
        -: 1338:  {
    37044: 1339:    state->coins += 1;
    37044: 1340:  }
    18925: 1341:      else if (state->hand[player][i] == silver)
branch  0 taken 13%
branch  1 taken 87%
        -: 1342:  {
     2536: 1343:    state->coins += 2;
     2536: 1344:  }
    16389: 1345:      else if (state->hand[player][i] == gold)
branch  0 taken 11%
branch  1 taken 89%
        -: 1346:  {
     1826: 1347:    state->coins += 3;
     1826: 1348:  } 
    55969: 1349:    } 
        -: 1350:
        -: 1351:  //add bonus
    11812: 1352:  state->coins += bonus;
        -: 1353:
    11812: 1354:  return 0;
        -: 1355:}
        -: 1356:
        -: 1357:
        -: 1358://end of dominion.c
        -: 1359:
